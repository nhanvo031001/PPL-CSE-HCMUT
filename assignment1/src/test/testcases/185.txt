
                    typedef pair<int,int> myPair;
                    int Dijkstra(int** graph, int src, int dst) {
                        // TODO: return the length of shortest path from src to dst.
                        int n = 6;

                        list<myPair> *li = new list<myPair>[n];
                        
                        
                        //adjacency list
                        for (int i = 0; i < n; i++) {
                            for (int j = 0; j < n; j++) {
                                //cout << graph[i][j] << "  ";
                                if (i != j && graph[i][j] != 0) {
                                    li[i].push_back(make_pair(graph[i][j], j));
                                }
                            }
                            //cout << endl;
                        }

                        vector<int> distance (n, 999999999);
                        priority_queue<myPair, vector<myPair>, greater<myPair>> q;
                        
                        q.push(make_pair(0, src));
                        distance[src] = 0;

                        while (!q.empty()) {
                            int u = q.top().second;
                            q.pop();

                            for (auto x = li[u].begin(); x != li[u].end(); x++) {
                                int weight = x->first;
                                int des = x->second;

                                if (distance[u] + weight < distance[des]) {
                                    distance[des] = distance[u] + weight;
                                    q.push(make_pair(distance[des], des));
                                }
                            }
                        }

                        /*for (int i = 0; i < 6; i++) {

                            cout << i << ": ";
                            for (auto x = li[i].begin(); x != li[i].end(); x++) {
                                cout << x->second << "  ";
                            }   
                            cout << endl;
                        }*/

                        int result = 0;

                        for (int i = 0; i < 9; i++) {
                            if (i == dst)   result = distance[i];
                        }

                        
                        return result;
                    }
                